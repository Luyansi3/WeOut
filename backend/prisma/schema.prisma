// TODO  Voir les types de lieux et les compléter
//      Voir les tag à compléter

// Génération du client
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Use the env variabl
}

// Model de tout ce qui concerne les comptes
enum Genre {
  HOMME
  FEMME
  AUTRE
}
model Compte {
// Compte qui regroupe organisateur et user
  id        String @id @default(uuid())
  hashedMdp String
  email     String @unique
  

  // A vérifier dans le code que uniquement un des deux soit NULL
  user      User?
  organisme Organisme?

  //Nombre d'evenement organise
  nombreSoiree Int @default(0)
}
model User {
  id     String @id @default(uuid())
  prenom String
  nom    String
  genre  Genre

  nombreAmis Int @default(0)

  // Geolocalisation
  longitude         Float
  latitude          Float
  dateActualisation DateTime @updatedAt

  // Relation d'amities
  ami   User[] @relation("Amis")
  amiDe User[] @relation("Amis")   //Nécessité de bidirectionnalité, mais nous l'ignorerons !

  // Relatoin de blockage
  bloque   User[] @relation("Bloque")
  bloquant User[] @relation("Bloque")

  // Demandes envoyées et reçues
  demandeEnvoye User[] @relation("Demande")
  demandeRecue  User[] @relation("Demande")

  //Caractéristiques
  bio String?
  
  photoProfil String? @unique
  pseudo String @unique
  lienInsta String? @unique
  lienTwitter String? @unique

  dancing Int?
  talking Int?
  alcohool Int?

  // Groupes d'appartenance
  groupes Groupe[]

  // Commentaires rédigés 
  commentaires Commentaire[]

  // Photos (likés et postés)
  likes  Photo[] @relation("Likes")
  photos Photo[]

  // Compte associé
  compte   Compte @relation(fields: [compteId], references: [id])
  compteId String @unique

  //Nombre de soirée participée
  nombreSoiree Int @default(0)
}
model Organisme {
  id   String @id @default(uuid())
  nom  String @unique
  note Float?

  //Photo de profil
  photo String


  // Soirees organisees
  soirees Soiree[]

  // Les champs ID pour chaque tag
  tags Tag[]

  // Compte associé
  compte   Compte @relation(fields: [compteId], references: [id])
  compteId String @unique
}

// Model et enum concernant les lieux
enum TypeLieux {
  BOITE
  BAR
  BARDANSANT
  CAFE
}
model Lieux {
  id   Int       @id @default(autoincrement())
  nom  String
  type TypeLieux
  note Float?
  nombreNote Int @default(0)

  // adresse
  adresse   String @unique
  longitude Float
  latitude  Float

  // Les champs ID pour chaque tag
  tags Tag[]

  // Soirees hebergees
  soirees Soiree[]
}

// Model et enums soirées
enum Tag {
  ELECTRO
  HOUSE
  TECHNO
  COMMERCIAL
}
model Soiree {
  id                  Int    @id @default(autoincrement())
  nom                 String
  description         String
  photoCouverturePath String?


  //Caractéristiques
  dancing Int?
  nbNoteDancing Int @default(0) 
  talking Int?
  nbNoteTalking Int @default(0)
  alcohool Int?
  nbNoteAlcohool Int @default(0)

  // date
  debut DateTime
  fin   DateTime

  // Lieu de soirée
  lieu   Lieux? @relation(fields: [lieuId], references: [id])
  lieuId Int?

  // Organisme organisant
  organsime   Organisme? @relation(fields: [organismeId], references: [id])
  organismeId String?

  // Groupes participants à la soirée
  groupes Groupe[] @relation("Participe")

  // Photos postées de la soirée
  photos Photo[]

  // Commentaires de la soirée
  commentaires Commentaire[]

  // Les champs ID pour chaque tag
  tags Tag[]


  //Nombre de participants
  nombreParticipants Int @default(0)
}
model Groupe {
  id String @id @default(uuid())

  // Users composants le groupe (peut être un seul)
  users User[]

  // Soirée à laquelle le groupe participe
  soiree   Soiree @relation(fields: [soireeId], references: [id], "Participe")
  soireeId Int
}
model Photo {
  id   Int    @id @default(autoincrement())
  path String @unique

  // Soirée de la photo
  soiree   Soiree @relation(fields: [soireeId], references: [id])
  soireeId Int

  // User qui a posté la photo 
  createur User   @relation(fields: [userId], references: [id])
  userId   String
  likedBy  User[] @relation("Likes")
}
model Commentaire {
  id      Int    @id @default(autoincrement())
  contenu String

  // Soiree associée au commentaire
  soiree   Soiree @relation(fields: [soireeId], references: [id])
  soireeId Int
  // User qui a posté le commentaire
  createur User   @relation(fields: [userId], references: [id])
  userId   String
}